{"version":3,"file":"TokenPairModel.js","sourceRoot":"","sources":["../../src/models/TokenPairModel.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAA0D;AAC1D,oCAA2D;AAC3D,uDAA4E;AAC5E,0CAA2C;AAE9B,QAAA,sBAAsB,GAAG,aAAa,CAAC;AAEpD,MAAM,eAAe,GAAW,IAAI,iBAAM,CACxC;IACE,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,IAAI;KACb;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,KAAK,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,CAAC;KACX;IACD,WAAW,EAAE;QACX;YACE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;YAC3B,GAAG,EAAE,wCAAsB;YAC3B,QAAQ,EAAE,KAAK;SAChB;KACF;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAO,GAAG,EAAE,EAAE;IAChF,IAAI,CAAC;QACH,MAAM,iCAAe,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;QACzD,MAAM,uBAAY,CAAC,GAAG,CAAC,GAAG,CAAC,MAAgB,CAAC,CAAC;IAC/C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,IAAI,qBAAa,CAAC,2DAA2D,GAAI,KAA0B,CAAC,OAAO,CAAC,CAAC;IAC7H,CAAC;AACH,CAAC,CAAA,CAAC,CAAC;AAIU,QAAA,cAAc,GAA2B,IAAA,gBAAK,EACzD,8BAAsB,EACtB,eAAe,CAChB,CAAC","sourcesContent":["import { Schema, Document, Model, model } from 'mongoose';\nimport { InternalError, ITokenPairSchema } from '../utils';\nimport { DATA_SOURCE_COLLECTION, DataSourceModel } from './DataSourceModel';\nimport { cacheService } from '../services';\n\nexport const TOKEN_PAIRS_COLLECTION = 'token-pairs';\n\nconst TokenPairSchema: Schema = new Schema<ITokenPairSchema>(\n  {\n    symbol: {\n      type: String,\n      required: true,\n      unique: true,\n    },\n    address: {\n      type: String,\n      required: true,\n    },\n    price: {\n      type: Number,\n      required: true,\n      default: 0,\n    },\n    dataSources: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: DATA_SOURCE_COLLECTION,\n        required: false,\n      },\n    ],\n  },\n  { timestamps: true },\n);\n\nTokenPairSchema.post('deleteOne', { document: true, query: false }, async (doc) => {\n  try {\n    await DataSourceModel.deleteMany({ tokenPair: doc._id });\n    await cacheService.del(doc.symbol as string);\n  } catch (error) {\n    throw new InternalError('An error occurred during post delete hook of token pair: ' + (error as unknown as Error).message);\n  }\n});\n\ninterface ITokenPairModel extends ITokenPairSchema, Document {}\n\nexport const TokenPairModel: Model<ITokenPairModel> = model<ITokenPairModel>(\n  TOKEN_PAIRS_COLLECTION,\n  TokenPairSchema,\n);\n"]}