{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import express from 'express';\nimport dotenv from 'dotenv';\nimport helmet from 'helmet';\nimport cors from 'cors';\nimport { rateLimit } from 'express-rate-limit';\nimport { RedisStore } from 'rate-limit-redis';\nimport { errorHandler, NotFoundError } from './utils';\nimport { Mongoose, Redis } from './config';\n\nconst handle = async (err: Error, origin: 'uncaughtException' | 'unhandledRejection') => {\n  console.error(`Caught exception: ${err.stack}`);\n  console.error(`Exception origin: ${origin}`);\n};\n\nprocess.on('uncaughtException', handle);\nprocess.on('unhandledRejection', handle);\n\n(async () => {\n  dotenv.config();\n\n  const mongoose = Mongoose.getInstance();\n  const redis = Redis.getInstance();\n\n  process.on('SIGINT', async () => {\n    await mongoose.disconnect();\n    await redis.disconnect();\n    process.exit(0);\n  });\n\n  try {\n    const app = express();\n\n    await mongoose.connect();\n    await redis.connect();\n\n    const limiter = rateLimit({\n      windowMs: 15 * 60 * 1000,\n      max: 100,\n      standardHeaders: true,\n      legacyHeaders: false,\n      store: new RedisStore({\n        sendCommand: (...args: string[]) => redis.getClient().sendCommand(args),\n      }),\n    });\n\n    app.use(limiter);\n    app.use(helmet());\n    app.use(cors());\n    app.use(express.json());\n    app.use(express.urlencoded({ extended: false }));\n\n    const { router } = await import('./routes');\n\n    app.use('/api', router);\n\n    app.all('*', (req, res, next) => {\n      next(new NotFoundError('The route does not exists!'));\n    });\n    app.use(errorHandler);\n\n    const PORT = process.env.PORT || 5000;\n\n    app.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n  } catch (error) {\n    console.error(error);\n    await mongoose.disconnect();\n    await redis.disconnect();\n    process.exit(1);\n  }\n})();\n"]}