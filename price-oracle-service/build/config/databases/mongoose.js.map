{"version":3,"file":"mongoose.js","sourceRoot":"","sources":["../../../src/config/databases/mongoose.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,wDAAgC;AAChC,uCAA4C;AAE5C,MAAa,QAAQ;IAKnB,YAAoB,QAAgB;QAF5B,gBAAW,GAAY,KAAK,CAAC;QAGnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEM,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS;YACxB,MAAM,IAAI,qBAAa,CAAC,kDAAkD,CAAC,CAAC;QAE9E,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACvB,QAAQ,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC1D,CAAC;QACD,OAAO,QAAQ,CAAC,QAAQ,CAAC;IAC3B,CAAC;IAEY,OAAO;;YAClB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACtB,IAAI,CAAC;oBACH,MAAM,kBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACtC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBACxB,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;gBAChD,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;oBAClD,MAAM,KAAK,CAAC;gBACd,CAAC;YACH,CAAC;QACH,CAAC;KAAA;IAEY,UAAU;;YACrB,IAAI,CAAC;gBACH,MAAM,kBAAQ,CAAC,UAAU,EAAE,CAAC;gBAC5B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;gBACzB,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACtC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;gBACrD,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC;KAAA;CACF;AA1CD,4BA0CC","sourcesContent":["import mongoose from 'mongoose';\nimport { InternalError } from '../../utils';\n\nexport class Mongoose {\n  private static instance: Mongoose;\n  private mongoURI: string;\n  private isConnected: boolean = false;\n\n  private constructor(mongoURI: string) {\n    this.mongoURI = mongoURI;\n  }\n\n  public static getInstance(): Mongoose {\n    if (!process.env.MONGO_URI)\n      throw new InternalError('Invalid/Missing environment variable \"MONGO_URI\"');\n\n    if (!Mongoose.instance) {\n      Mongoose.instance = new Mongoose(process.env.MONGO_URI);\n    }\n    return Mongoose.instance;\n  }\n\n  public async connect(): Promise<void> {\n    if (!this.isConnected) {\n      try {\n        await mongoose.connect(this.mongoURI);\n        this.isConnected = true;\n        console.log('MongoDB connected successfully');\n      } catch (error) {\n        console.error('MongoDB connection error:', error);\n        throw error;\n      }\n    }\n  }\n\n  public async disconnect(): Promise<void> {\n    try {\n      await mongoose.disconnect();\n      this.isConnected = false;\n      console.log('MongoDB disconnected');\n    } catch (error) {\n      console.error('MongoDB disconnection error:', error);\n      throw error;\n    }\n  }\n}\n"]}