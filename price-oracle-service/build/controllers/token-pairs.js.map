{"version":3,"file":"token-pairs.js","sourceRoot":"","sources":["../../src/controllers/token-pairs.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Types } from 'mongoose';\nimport { TokenPairModel } from '../models';\nimport { AuthRequest, BadRequestError, ITokenPairSchema, NotFoundError } from '../utils';\n\nexport const createTokenPair = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  const { price, symbol, address } = req.body;\n\n  try {\n    const tokenPairExists = await TokenPairModel.findOne({\n      $or: [{ symbol }, { address }],\n    }).exec();\n\n    if (tokenPairExists) {\n      throw new BadRequestError(\n        `Token pair already exists with this symbol ${symbol} or this address ${address}`,\n      );\n    }\n\n    const tokenPair = {\n      symbol,\n      price: price || 0,\n      address,\n    } as ITokenPairSchema;\n\n    const result = new TokenPairModel(tokenPair).save();\n\n    res.status(201).json(result);\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const updateTokenPair = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  const id = new Types.ObjectId(req.params.id);\n  const { price, symbol, address } = req.body;\n\n  try {\n    const tokenPair = await TokenPairModel.findById(id).exec();\n\n    if (!tokenPair) {\n      throw new NotFoundError(`Token pair does not exists with this id ${id}`);\n    }\n\n    const tokenPairUpdated = {\n      symbol: symbol || tokenPair.symbol,\n      price: price || tokenPair.price,\n      address: address || tokenPair.address,\n    } as ITokenPairSchema;\n\n    await TokenPairModel.updateOne({ _id: id }, { $set: tokenPairUpdated }).exec();\n\n    res.status(200).json({ updatedId: req.params.id });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const getTokenPairById = async (req: Request, res: Response, next: NextFunction) => {\n  const id = new Types.ObjectId(req.params.id);\n\n  try {\n    const tokenPair = await TokenPairModel.findById(id).exec();\n\n    if (!tokenPair) {\n      throw new NotFoundError(`Token pair does not exists with this id ${id}`);\n    }\n\n    res.status(200).json(tokenPair);\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const getTokenPairBySymbol = async (req: Request, res: Response, next: NextFunction) => {\n  const { symbol } = req.params;\n\n  try {\n    const tokenPair = await TokenPairModel.findOne({ symbol }).exec();\n\n    if (!tokenPair) {\n      throw new NotFoundError(`Token pair does not exists with this symbol ${symbol}`);\n    }\n\n    res.status(200).json(tokenPair);\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const getTokenPairs = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const tokenPairs = await TokenPairModel.find().exec();\n\n    res.status(200).json(tokenPairs);\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const deleteTokenPair = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  const id = new Types.ObjectId(req.params.id);\n\n  try {\n    await TokenPairModel.deleteOne({ _id: id }).exec();\n\n    res.status(200).json({ deletedId: req.params.id });\n  } catch (error) {\n    next(error);\n  }\n};\n"]}