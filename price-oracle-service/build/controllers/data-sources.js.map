{"version":3,"file":"data-sources.js","sourceRoot":"","sources":["../../src/controllers/data-sources.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Response } from 'express';\nimport { Types } from 'mongoose';\nimport { DataSourceModel, SupportedDataSourcesModel, TokenPairModel } from '../models';\nimport { AuthRequest, NotFoundError } from '../utils';\n\nexport const createDataSource = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  const { symbol, sourceName } = req.body;\n\n  try {\n    const tokenPair = await TokenPairModel.findOne({ symbol }).exec();\n    const source = await SupportedDataSourcesModel.findOne({ name: sourceName }).exec();\n\n    if (!tokenPair) {\n      throw new NotFoundError(`Token pair does not exists with this symbol ${symbol}`);\n    }\n\n    if (!source) {\n      throw new NotFoundError(`Supported source does not exists with this name ${sourceName}`);\n    }\n\n    const dataSource = {\n      tokenPair: tokenPair._id,\n      source: source._id,\n    };\n\n    const newDataSource = await new DataSourceModel(dataSource).save();\n    await TokenPairModel.updateOne({ symbol }, { $set: { dataSources: [ ...tokenPair.dataSources, newDataSource._id ] } })\n\n    res.status(201).json(newDataSource);\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const updateDataSource = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  const id = new Types.ObjectId(req.params.id);\n  const { symbol, sourceName } = req.body;\n\n  try {\n    const dataSource = await DataSourceModel.findById(id).exec();\n\n    if (!dataSource) {\n      throw new NotFoundError(`Data source does not exists with this id ${id}`);\n    }\n\n    const updated: {\n      tokenPair?: Types.ObjectId;\n      source?: Types.ObjectId;\n    } = {};\n\n    if (symbol) {\n      const tokenPair = await TokenPairModel.findById(id).exec();\n\n      if (!tokenPair) {\n        throw new NotFoundError(`Token pair does not exists with this symbol ${symbol}`);\n      }\n\n      updated.tokenPair = tokenPair._id as Types.ObjectId;\n    }\n\n    if (sourceName) {\n      const source = await SupportedDataSourcesModel.findOne({ name: sourceName }).exec();\n\n      if (!source) {\n        throw new NotFoundError(`Supported source does not exists with this name ${sourceName}`);\n      }\n\n      updated.source = source._id as Types.ObjectId;\n    }\n\n    await DataSourceModel.updateOne({ _id: id }, { $set: updated }).exec();\n\n    res.status(200).json({ updatedId: req.params.id });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const deleteDataSource = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  const id = new Types.ObjectId(req.params.id);\n\n  try {\n    await DataSourceModel.deleteOne({ _id: id }).exec();\n\n    res.status(200).json({ deletedId: req.params.id });\n  } catch (error) {\n    next(error);\n  }\n};\n"]}