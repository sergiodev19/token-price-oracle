{"version":3,"file":"CacheService.js","sourceRoot":"","sources":["../../src/services/CacheService.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,oCAAyC;AACzC,sCAAmD;AAEnD,MAAM,YAAY;IAGhB,YAAY,KAAY;QACtB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;IACvC,CAAC;IAEK,GAAG,CAAC,MAAc;;YACtB,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC5C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,qBAAa,CAAE,KAA0B,CAAC,OAAO,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC;KAAA;IAEK,GAAG;6DAAC,GAAW,EAAE,KAAa,EAAE,SAAiB,GAAG;YACxD,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YAClE,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,qBAAa,CAAE,KAA0B,CAAC,OAAO,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC;KAAA;IAEK,GAAG,CAAC,GAAW;;YACnB,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACzC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,qBAAa,CAAE,KAA0B,CAAC,OAAO,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC;KAAA;CACF;AAEY,QAAA,YAAY,GAAG,IAAI,YAAY,CAAC,cAAK,CAAC,WAAW,EAAE,CAAC,CAAC","sourcesContent":["import { InternalError } from '../utils';\nimport { Redis, RedisClientType } from '../config';\n\nclass CacheService {\n  private redisClient: RedisClientType;\n\n  constructor(redis: Redis) {\n    this.redisClient = redis.getClient();\n  }\n\n  async get(symbol: string) {\n    try {\n      return await this.redisClient.get(symbol);\n    } catch (error) {\n      throw new InternalError((error as unknown as Error).message);\n    }\n  }\n\n  async set(key: string, value: string, expire: number = 300) {\n    try {\n      return await this.redisClient.set(key, value, { 'EX': expire });\n    } catch (error) {\n      throw new InternalError((error as unknown as Error).message);\n    }\n  }\n\n  async del(key: string) {\n    try {\n      return await this.redisClient.del(key);\n    } catch (error) {\n      throw new InternalError((error as unknown as Error).message);\n    }\n  }\n}\n\nexport const cacheService = new CacheService(Redis.getInstance());\n"]}