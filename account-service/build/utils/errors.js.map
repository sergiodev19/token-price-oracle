{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../src/utils/errors.ts"],"names":[],"mappings":";;;AAEA,MAAM,SAAU,SAAQ,KAAK;IAG3B,YAAY,IAAY,EAAE,UAAkB,EAAE,UAAkB,EAAE;QAChE,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;CACF;AAED,MAAa,eAAgB,SAAQ,SAAS;IAC5C,YAAY,OAAgB;QAC1B,KAAK,CAAC,iBAAiB,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;CACF;AAJD,0CAIC;AAED,MAAa,iBAAkB,SAAQ,SAAS;IAC9C,YAAY,OAAgB;QAC1B,KAAK,CAAC,mBAAmB,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;CACF;AAJD,8CAIC;AAED,MAAa,cAAe,SAAQ,SAAS;IAC3C,YAAY,OAAgB;QAC1B,KAAK,CAAC,gBAAgB,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;CACF;AAJD,wCAIC;AAED,MAAa,aAAc,SAAQ,SAAS;IAC1C,YAAY,OAAgB;QAC1B,KAAK,CAAC,eAAe,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;CACF;AAJD,sCAIC;AAED,MAAa,QAAS,SAAQ,SAAS;IACrC,YAAY,OAAgB;QAC1B,KAAK,CAAC,UAAU,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC;CACF;AAJD,4BAIC;AAED,MAAa,aAAc,SAAQ,SAAS;IAC1C,YAAY,OAAgB;QAC1B,KAAK,CAAC,eAAe,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;CACF;AAJD,sCAIC;AAEM,MAAM,YAAY,GAAG,CAAC,GAAc,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAC9F,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC;IACpC,OAAO,GAAG,CAAC,MAAM,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;AAChE,CAAC,CAAC;AAHW,QAAA,YAAY,gBAGvB","sourcesContent":["import { NextFunction, Request, Response } from 'express';\n\nclass BaseError extends Error {\n  public statusCode: number;\n\n  constructor(name: string, statusCode: number, message: string = '') {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.name = name;\n    this.statusCode = statusCode;\n    this.message = message;\n    Error.captureStackTrace(this);\n  }\n}\n\nexport class BadRequestError extends BaseError {\n  constructor(message?: string) {\n    super('BadRequestError', 400, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message?: string) {\n    super('UnauthorizedError', 401, message);\n  }\n}\n\nexport class ForbiddenError extends BaseError {\n  constructor(message?: string) {\n    super('ForbiddenError', 403, message);\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message?: string) {\n    super('NotFoundError', 404, message);\n  }\n}\n\nexport class APIError extends BaseError {\n  constructor(message?: string) {\n    super('APIError', 405, message);\n  }\n}\n\nexport class InternalError extends BaseError {\n  constructor(message?: string) {\n    super('InternalError', 500, message);\n  }\n}\n\nexport const errorHandler = (err: BaseError, req: Request, res: Response, next: NextFunction) => {\n  const { statusCode, message } = err;\n  return res.status(statusCode || 500).json({ error: message });\n};\n"]}