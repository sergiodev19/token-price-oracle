{"version":3,"file":"password.js","sourceRoot":"","sources":["../../src/utils/password.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,wDAA8B;AAEvB,MAAM,oBAAoB,GAAG,CAAO,QAAgB,EAAmB,EAAE;IAC9E,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5F,MAAM,IAAI,GAAG,MAAM,kBAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC1C,OAAO,kBAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACzC,CAAC,CAAA,CAAC;AAJW,QAAA,oBAAoB,wBAI/B;AAEK,MAAM,eAAe,GAAG,CAAO,QAAgB,EAAE,IAAY,EAAoB,EAAE;IACxF,OAAO,MAAM,kBAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAC9C,CAAC,CAAA,CAAC;AAFW,QAAA,eAAe,mBAE1B","sourcesContent":["import bcrypt from 'bcryptjs';\n\nexport const generatePasswordHash = async (password: string): Promise<string> => {\n  const rounds = process.env.BCRYPT_SALT_ROUNDS ? Number(process.env.BCRYPT_SALT_ROUNDS) : 10;\n  const salt = await bcrypt.genSalt(rounds);\n  return bcrypt.hashSync(password, salt);\n};\n\nexport const comparePassword = async (password: string, hash: string): Promise<boolean> => {\n  return await bcrypt.compare(password, hash);\n};"]}