{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/config/databases/mongo/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAA0E;AA8ChD,mFA9CJ,YAAE,OA8CI;AAAZ,yFA9CU,kBAAQ,OA8CV;AAAM,2FA9CM,oBAAU,OA8CN;AA7CxC,0CAAgE;AAChE,2CAAkD;AAElD,MAAM,KAAK;IAKT,YAAoB,GAAW;QAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,qBAAW,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;QAC3B,IAAI,CAAC,EAAE,CAAC,gBAAgB,sCAAwB,EAAE,SAAS,EAAE,+BAAmB,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,EAAE,CAAC,UAAU,qCAAuB,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IACxF,CAAC;IAEM,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;YAC3B,MAAM,IAAI,qBAAa,CAAC,mDAAmD,CAAC,CAAC;QAC/E,CAAC;QAED,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;IAC7E,CAAC;IAEY,OAAO;;YAClB,IAAI,CAAC;gBACH,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBAC5B,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;gBACtC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;YAC7B,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,KAAK,EAAE,CAAC,CAAC;gBAC1D,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC;KAAA;IAEM,KAAK;QACV,IAAI,CAAC,IAAI,CAAC,EAAE;YAAE,MAAM,IAAI,qBAAa,CAAC,kCAAkC,CAAC,CAAC;QAC1E,OAAO,IAAI,CAAC,EAAE,CAAC;IACjB,CAAC;IAEY,KAAK;;YAChB,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YAC1B,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QACzC,CAAC;KAAA;CACF;AAEQ,sBAAK;AACd,8CAA4B","sourcesContent":["import { MongoClient, Db, ObjectId, Collection, Document } from 'mongodb';\nimport { InternalError, CollectionNames } from '../../../utils';\nimport { userSchemaValidator } from './validator';\n\nclass Mongo {\n  private static instance: Mongo;\n  private client: MongoClient;\n  private db!: Db;\n\n  private constructor(uri: string) {\n    this.client = new MongoClient(uri);\n    this.db = this.client.db();\n    this.db.createCollection(CollectionNames.USERS, { validator: userSchemaValidator });\n    this.db.collection(CollectionNames.USERS).createIndex({ email: 1 }, { unique: true });\n  }\n\n  public static getInstance(): Mongo {\n    if (!process.env.MONGO_URI) {\n      throw new InternalError('Invalid/Missing environment variable: \"MONGO_URI\"');\n    }\n\n    return !Mongo.instance ? new Mongo(process.env.MONGO_URI) : Mongo.instance;\n  }\n\n  public async connect(): Promise<void> {\n    try {\n      await this.client.connect();\n      console.log('Connected to the Mongo');\n      this.db = this.client.db();\n    } catch (error) {\n      console.error(`Failed to connect to the Mongo: ${error}`);\n      throw error;\n    }\n  }\n\n  public getDb(): Db {\n    if (!this.db) throw new InternalError('Mongo connection not established');\n    return this.db;\n  }\n\n  public async close(): Promise<void> {\n    await this.client.close();\n    console.log('Mongo connection closed');\n  }\n}\n\nexport { Mongo, ObjectId, Db, Collection, Document };\nexport * from './validator';\n"]}