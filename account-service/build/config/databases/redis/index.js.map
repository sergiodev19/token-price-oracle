{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/config/databases/redis/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iCAAsD;AACtD,0CAA+C;AAE/C,MAAM,KAAK;IAKT,YAAoB,GAAW;QAFvB,gBAAW,GAAY,KAAK,CAAC;QAGnC,IAAI,CAAC,MAAM,GAAG,IAAA,oBAAY,EAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IACtC,CAAC;IAEM,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;YAC3B,MAAM,IAAI,qBAAa,CAAC,mDAAmD,CAAC,CAAC;QAC/E,CAAC;QAED,IAAI,KAAK,CAAC,QAAQ;YAAE,OAAO,KAAK,CAAC,QAAQ,CAAC;QAE1C,KAAK,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAElD,OAAO,KAAK,CAAC,QAAQ,CAAC;IACxB,CAAC;IAEY,OAAO;;YAClB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACtB,IAAI,CAAC;oBACH,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;oBAC5B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBACxB,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;gBAC9C,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,KAAK,EAAE,CAAC,CAAC;oBAC1D,MAAM,KAAK,CAAC;gBACd,CAAC;YACH,CAAC;QACH,CAAC;KAAA;IAEM,SAAS;QACd,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,qBAAa,CAAC,kCAAkC,CAAC,CAAC;QAC9E,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEY,UAAU;;YACrB,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YAC/B,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QACzC,CAAC;KAAA;CACF;AAEQ,sBAAK","sourcesContent":["import { createClient, RedisClientType } from 'redis';\nimport { InternalError } from '../../../utils';\n\nclass Redis {\n  private static instance: Redis;\n  private client: RedisClientType;\n  private isConnected: boolean = false;\n\n  private constructor(url: string) {\n    this.client = createClient({ url });\n  }\n\n  public static getInstance(): Redis {\n    if (!process.env.REDIS_URL) {\n      throw new InternalError('Invalid/Missing environment variable: \"REDIS_URL\"');\n    }\n\n    if (Redis.instance) return Redis.instance;\n\n    Redis.instance = new Redis(process.env.REDIS_URL);\n\n    return Redis.instance;\n  }\n\n  public async connect(): Promise<void> {\n    if (!this.isConnected) {\n      try {\n        await this.client.connect();\n        this.isConnected = true;\n        console.log('Redis connected successfully');\n      } catch (error) {\n        console.error(`Failed to connect to the Redis: ${error}`);\n        throw error;\n      }\n    }\n  }\n\n  public getClient(): RedisClientType {\n    if (!this.client) throw new InternalError('Redis connection not established');\n    return this.client;\n  }\n\n  public async disconnect(): Promise<void> {\n    await this.client.disconnect();\n    console.log('Redis connection closed');\n  }\n}\n\nexport { Redis, RedisClientType };\n"]}