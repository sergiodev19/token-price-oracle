{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../src/controllers/auth.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,sCAAsC;AACtC,oCAOkB;AAEX,MAAM,YAAY,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACpF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAE3C,IAAI,CAAC;QACH,MAAM,UAAU,GAAG,MAAM,kBAAS,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QAE7D,IAAI,UAAU,EAAE,CAAC;YACf,MAAM,IAAI,uBAAe,CAAC,uCAAuC,KAAK,EAAE,CAAC,CAAC;QAC5E,CAAC;QAED,MAAM,IAAI,GAAG;YACX,IAAI;YACJ,KAAK;YACL,QAAQ,EAAE,MAAM,IAAA,4BAAoB,EAAC,QAAQ,CAAC;YAC9C,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,SAAS,EAAE,IAAI;SACD,CAAC;QAEjB,MAAM,MAAM,GAAG,IAAI,kBAAS,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;QAE1C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,CAAC,KAAK,CAAC,CAAC;IACd,CAAC;AACH,CAAC,CAAA,CAAC;AAxBW,QAAA,YAAY,gBAwBvB;AAEK,MAAM,SAAS,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACjF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAErC,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,kBAAS,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,EAAE,CAAA;QAEtD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,qBAAa,CAAC,wBAAwB,KAAK,YAAY,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,IAAA,uBAAe,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE/D,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,uBAAe,CAAC,kBAAkB,CAAC,CAAC;QAChD,CAAC;QAED,MAAM,YAAY,GAAG;YACnB,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC;QAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,iCACf,YAAY,KACf,KAAK,EAAE,IAAA,qBAAa,EAAC,YAAY,CAAC,IAClC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,CAAC,KAAK,CAAC,CAAC;IACd,CAAC;AACH,CAAC,CAAA,CAAC;AA7BW,QAAA,SAAS,aA6BpB","sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { UserModel } from '../models';\nimport {\n  BadRequestError,\n  generateToken,\n  NotFoundError,\n  IUserSchema,\n  generatePasswordHash,\n  comparePassword,\n} from '../utils';\n\nexport const registerUser = async (req: Request, res: Response, next: NextFunction) => {\n  const { name, email, password } = req.body;\n\n  try {\n    const userExists = await UserModel.findOne({ email }).exec();\n\n    if (userExists) {\n      throw new BadRequestError(`User already exists with this email ${email}`);\n    }\n\n    const user = {\n      name,\n      email,\n      password: await generatePasswordHash(password),\n      createdAt: new Date(),\n      updatedAt: null,\n    } as IUserSchema;\n\n    const result = new UserModel(user).save();\n\n    res.status(201).json(result);\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const loginUser = async (req: Request, res: Response, next: NextFunction) => {\n  const { email, password } = req.body;\n\n  try {\n    const user = await UserModel.findOne({ email }).exec()\n\n    if (!user) {\n      throw new NotFoundError(`User with this email ${email} not found`);\n    }\n\n    const isMatch = await comparePassword(password, user.password);\n\n    if (!isMatch) {\n      throw new BadRequestError('Invalid password');\n    }\n\n    const tokenPayload = {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n    };\n\n    res.status(200).json({\n      ...tokenPayload,\n      token: generateToken(tokenPayload),\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n"]}