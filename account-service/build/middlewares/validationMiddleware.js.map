{"version":3,"file":"validationMiddleware.js","sourceRoot":"","sources":["../../src/middlewares/validationMiddleware.ts"],"names":[],"mappings":";;;AACA,yDAAqD;AACrD,uCAA2C;AAC3C,oCAA2C;AAEpC,MAAM,oBAAoB,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACtF,MAAM,MAAM,GAAG,IAAA,oCAAgB,EAAC,GAAG,CAAC,CAAC;IAErC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC;QACtB,OAAO,IAAI,CAAC,IAAI,uBAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,IAAA,0BAAe,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;QACrD,OAAO,IAAI,CAAC,IAAI,uBAAe,CAAC,YAAY,CAAC,CAAC,CAAC;IACjD,CAAC;IAED,IAAI,EAAE,CAAC;AACT,CAAC,CAAC;AAZW,QAAA,oBAAoB,wBAY/B","sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { validationResult } from 'express-validator';\nimport { isValidObjectId } from 'mongoose';\nimport { BadRequestError } from '../utils';\n\nexport const validationMiddleware = (req: Request, res: Response, next: NextFunction) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return next(new BadRequestError(errors.array()[0].msg));\n  }\n\n  if (req.params.id && !isValidObjectId(req.params.id)) {\n    return next(new BadRequestError('Invalid id'));\n  }\n\n  next();\n};\n"]}