{"version":3,"file":"authorize.js","sourceRoot":"","sources":["../../src/middlewares/authorize.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,gEAA+B;AAC/B,oCAAuE;AAEhE,MAAM,SAAS,GAAG,CAAO,GAAgB,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACrF,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;QAClF,OAAO,IAAI,CAAC,IAAI,yBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,UAAW,CAAC,CAAC;QAE3D,GAAG,CAAC,IAAI,GAAG,OAA+B,CAAC;QAE3C,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,CAAC,IAAI,yBAAiB,CAAE,KAA0B,CAAC,OAAO,CAAC,CAAC,CAAC;IACnE,CAAC;AACH,CAAC,CAAA,CAAC;AAfW,QAAA,SAAS,aAepB","sourcesContent":["import { Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { AuthRequest, UnauthorizedError, IUserSchema } from '../utils';\n\nexport const authorize = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  if (!req.headers.authorization || !req.headers.authorization.startsWith('Bearer')) {\n    return next(new UnauthorizedError('Unauthorized'));\n  }\n\n  try {\n    const token = req.headers.authorization.split(' ')[1];\n    const payload = jwt.verify(token, process.env.JWT_SECRET!);\n\n    req.user = payload as Partial<IUserSchema>;\n\n    next();\n  } catch (error) {\n    next(new UnauthorizedError((error as unknown as Error).message));\n  }\n};\n"]}